{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\n\nfunction fixControlledValue(value) {\n  if (typeof value === 'undefined' || value === null) {\n    return '';\n  }\n\n  return value;\n}\n\nfunction hasPrefixSuffix(props) {\n  return !!('prefix' in props || props.suffix || props.allowClear);\n}\n\nvar InputSizes = tuple('small', 'default', 'large');\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n\n    _this.saveInput = function (node) {\n      _this.input = node;\n    };\n\n    _this.handleKeyDown = function (e) {\n      var _this$props = _this.props,\n          onPressEnter = _this$props.onPressEnter,\n          onKeyDown = _this$props.onKeyDown;\n\n      if (e.keyCode === 13 && onPressEnter) {\n        onPressEnter(e);\n      }\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    };\n\n    _this.handleReset = function (e) {\n      _this.setValue('', e, function () {\n        _this.focus();\n      });\n    };\n\n    _this.handleChange = function (e) {\n      _this.setValue(e.target.value, e);\n    };\n\n    _this.renderComponent = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n      var customizePrefixCls = _this.props.prefixCls;\n      var prefixCls = getPrefixCls('input', customizePrefixCls);\n      return _this.renderLabeledInput(prefixCls, _this.renderInput(prefixCls));\n    };\n\n    var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;\n    _this.state = {\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidUpdate\",\n    // Since polyfill `getSnapshotBeforeUpdate` need work with `componentDidUpdate`.\n    // We keep an empty function here.\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {\n        warning(this.input !== document.activeElement, 'Input', \"When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ\");\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getInputClassName\",\n    value: function getInputClassName(prefixCls) {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          size = _this$props2.size,\n          disabled = _this$props2.disabled;\n      return classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, e, callback) {\n      if (!('value' in this.props)) {\n        this.setState({\n          value: value\n        }, callback);\n      }\n\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        var event = e;\n\n        if (e.type === 'click') {\n          // click clear icon\n          event = Object.create(e);\n          event.target = this.input;\n          event.currentTarget = this.input;\n          var originalInputValue = this.input.value; // change input value cause e.target.value should be '' when clear input\n\n          this.input.value = '';\n          onChange(event); // reset input value\n\n          this.input.value = originalInputValue;\n          return;\n        }\n\n        onChange(event);\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.input.blur();\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.input.select();\n    }\n  }, {\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _this$props3 = this.props,\n          allowClear = _this$props3.allowClear,\n          disabled = _this$props3.disabled;\n      var value = this.state.value;\n\n      if (!allowClear || disabled || value === undefined || value === null || value === '') {\n        return null;\n      }\n\n      return React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"filled\",\n        onClick: this.handleReset,\n        className: \"\".concat(prefixCls, \"-clear-icon\"),\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderSuffix\",\n    value: function renderSuffix(prefixCls) {\n      var _this$props4 = this.props,\n          suffix = _this$props4.suffix,\n          allowClear = _this$props4.allowClear;\n\n      if (suffix || allowClear) {\n        return React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-suffix\")\n        }, this.renderClearIcon(prefixCls), suffix);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderLabeledInput\",\n    value: function renderLabeledInput(prefixCls, children) {\n      var _classNames3;\n\n      var _this$props5 = this.props,\n          addonBefore = _this$props5.addonBefore,\n          addonAfter = _this$props5.addonAfter,\n          style = _this$props5.style,\n          size = _this$props5.size,\n          className = _this$props5.className; // Not wrap when there is not addons\n\n      if (!addonBefore && !addonAfter) {\n        return children;\n      }\n\n      var wrapperClassName = \"\".concat(prefixCls, \"-group\");\n      var addonClassName = \"\".concat(wrapperClassName, \"-addon\");\n      var addonBeforeNode = addonBefore ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonBefore) : null;\n      var addonAfterNode = addonAfter ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonAfter) : null;\n      var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, wrapperClassName, addonBefore || addonAfter));\n      var mergedGroupClassName = classNames(className, \"\".concat(prefixCls, \"-group-wrapper\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-lg\"), size === 'large'), _classNames3)); // Need another wrapper for changing display:table to display:inline-block\n      // and put style prop in wrapper\n\n      return React.createElement(\"span\", {\n        className: mergedGroupClassName,\n        style: style\n      }, React.createElement(\"span\", {\n        className: mergedWrapperClassName\n      }, addonBeforeNode, React.cloneElement(children, {\n        style: null\n      }), addonAfterNode));\n    }\n  }, {\n    key: \"renderLabeledIcon\",\n    value: function renderLabeledIcon(prefixCls, children) {\n      var _classNames4;\n\n      var props = this.props;\n      var suffix = this.renderSuffix(prefixCls);\n\n      if (!hasPrefixSuffix(props)) {\n        return children;\n      }\n\n      var prefix = props.prefix ? React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-prefix\")\n      }, props.prefix) : null;\n      var affixWrapperCls = classNames(props.className, \"\".concat(prefixCls, \"-affix-wrapper\"), (_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), props.size === 'small'), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), props.size === 'large'), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-affix-wrapper-with-clear-btn\"), props.suffix && props.allowClear && this.state.value), _classNames4));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: props.style\n      }, prefix, React.cloneElement(children, {\n        style: null,\n        className: this.getInputClassName(prefixCls)\n      }), suffix);\n    }\n  }, {\n    key: \"renderInput\",\n    value: function renderInput(prefixCls) {\n      var _this$props6 = this.props,\n          className = _this$props6.className,\n          addonBefore = _this$props6.addonBefore,\n          addonAfter = _this$props6.addonAfter;\n      var value = this.state.value; // Fix https://fb.me/react-unknown-prop\n\n      var otherProps = omit(this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'allowClear', // Input elements must be either controlled or uncontrolled,\n      // specify either the value prop, or the defaultValue prop, but not both.\n      'defaultValue', 'size']);\n      return this.renderLabeledIcon(prefixCls, React.createElement(\"input\", _extends({}, otherProps, {\n        value: fixControlledValue(value),\n        onChange: this.handleChange,\n        className: classNames(this.getInputClassName(prefixCls), _defineProperty({}, className, className && !addonBefore && !addonAfter)),\n        onKeyDown: this.handleKeyDown,\n        ref: this.saveInput\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderComponent);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('value' in nextProps) {\n        return {\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.defaultProps = {\n  type: 'text'\n};\nInput.propTypes = {\n  type: PropTypes.string,\n  id: PropTypes.string,\n  size: PropTypes.oneOf(InputSizes),\n  maxLength: PropTypes.number,\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  defaultValue: PropTypes.any,\n  className: PropTypes.string,\n  addonBefore: PropTypes.node,\n  addonAfter: PropTypes.node,\n  prefixCls: PropTypes.string,\n  onPressEnter: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  prefix: PropTypes.node,\n  suffix: PropTypes.node,\n  allowClear: PropTypes.bool\n};\npolyfill(Input);\nexport default Input;","map":{"version":3,"mappings":"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","names":["React","PropTypes","classNames","omit","polyfill","ConfigConsumer","Icon","tuple","warning","fixControlledValue","value","hasPrefixSuffix","props","suffix","allowClear","InputSizes","Input","_classCallCheck","_this","saveInput","node","input","handleKeyDown","e","onPressEnter","onKeyDown","keyCode","handleReset","setValue","focus","handleChange","target","renderComponent","getPrefixCls","customizePrefixCls","prefixCls","renderLabeledInput","renderInput","defaultValue","state","prevProps","document","activeElement","size","disabled","callback","setState","onChange","event","type","Object","create","currentTarget","originalInputValue","blur","select","undefined","theme","onClick","className","role","renderClearIcon","children","addonBefore","addonAfter","style","wrapperClassName","addonClassName","addonBeforeNode","addonAfterNode","mergedWrapperClassName","mergedGroupClassName","cloneElement","renderSuffix","prefix","affixWrapperCls","getInputClassName","otherProps","renderLabeledIcon","ref","nextProps","Component","defaultProps","propTypes","string","id","oneOf","maxLength","number","bool","any","func","onKeyUp","onFocus","onBlur"],"sources":["C:\\Users\\scs\\OneDrive\\Desktop\\react-youtube-clone-master\\client\\node_modules\\antd\\es\\input\\input\\Input.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\nfunction fixControlledValue(value) {\n    if (typeof value === 'undefined' || value === null) {\n        return '';\n    }\n    return value;\n}\nfunction hasPrefixSuffix(props) {\n    return !!('prefix' in props || props.suffix || props.allowClear);\n}\nconst InputSizes = tuple('small', 'default', 'large');\nclass Input extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveInput = (node) => {\n            this.input = node;\n        };\n        this.handleKeyDown = (e) => {\n            const { onPressEnter, onKeyDown } = this.props;\n            if (e.keyCode === 13 && onPressEnter) {\n                onPressEnter(e);\n            }\n            if (onKeyDown) {\n                onKeyDown(e);\n            }\n        };\n        this.handleReset = (e) => {\n            this.setValue('', e, () => {\n                this.focus();\n            });\n        };\n        this.handleChange = (e) => {\n            this.setValue(e.target.value, e);\n        };\n        this.renderComponent = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls } = this.props;\n            const prefixCls = getPrefixCls('input', customizePrefixCls);\n            return this.renderLabeledInput(prefixCls, this.renderInput(prefixCls));\n        };\n        const value = typeof props.value === 'undefined' ? props.defaultValue : props.value;\n        this.state = {\n            value,\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        if ('value' in nextProps) {\n            return {\n                value: nextProps.value,\n            };\n        }\n        return null;\n    }\n    // Since polyfill `getSnapshotBeforeUpdate` need work with `componentDidUpdate`.\n    // We keep an empty function here.\n    componentDidUpdate() { }\n    getSnapshotBeforeUpdate(prevProps) {\n        if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {\n            warning(this.input !== document.activeElement, 'Input', `When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ`);\n        }\n        return null;\n    }\n    getInputClassName(prefixCls) {\n        const { size, disabled } = this.props;\n        return classNames(prefixCls, {\n            [`${prefixCls}-sm`]: size === 'small',\n            [`${prefixCls}-lg`]: size === 'large',\n            [`${prefixCls}-disabled`]: disabled,\n        });\n    }\n    setValue(value, e, callback) {\n        if (!('value' in this.props)) {\n            this.setState({ value }, callback);\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            let event = e;\n            if (e.type === 'click') {\n                // click clear icon\n                event = Object.create(e);\n                event.target = this.input;\n                event.currentTarget = this.input;\n                const originalInputValue = this.input.value;\n                // change input value cause e.target.value should be '' when clear input\n                this.input.value = '';\n                onChange(event);\n                // reset input value\n                this.input.value = originalInputValue;\n                return;\n            }\n            onChange(event);\n        }\n    }\n    focus() {\n        this.input.focus();\n    }\n    blur() {\n        this.input.blur();\n    }\n    select() {\n        this.input.select();\n    }\n    renderClearIcon(prefixCls) {\n        const { allowClear, disabled } = this.props;\n        const { value } = this.state;\n        if (!allowClear || disabled || value === undefined || value === null || value === '') {\n            return null;\n        }\n        return (<Icon type=\"close-circle\" theme=\"filled\" onClick={this.handleReset} className={`${prefixCls}-clear-icon`} role=\"button\"/>);\n    }\n    renderSuffix(prefixCls) {\n        const { suffix, allowClear } = this.props;\n        if (suffix || allowClear) {\n            return (<span className={`${prefixCls}-suffix`}>\n          {this.renderClearIcon(prefixCls)}\n          {suffix}\n        </span>);\n        }\n        return null;\n    }\n    renderLabeledInput(prefixCls, children) {\n        const { addonBefore, addonAfter, style, size, className } = this.props;\n        // Not wrap when there is not addons\n        if (!addonBefore && !addonAfter) {\n            return children;\n        }\n        const wrapperClassName = `${prefixCls}-group`;\n        const addonClassName = `${wrapperClassName}-addon`;\n        const addonBeforeNode = addonBefore ? (<span className={addonClassName}>{addonBefore}</span>) : null;\n        const addonAfterNode = addonAfter ? <span className={addonClassName}>{addonAfter}</span> : null;\n        const mergedWrapperClassName = classNames(`${prefixCls}-wrapper`, {\n            [wrapperClassName]: addonBefore || addonAfter,\n        });\n        const mergedGroupClassName = classNames(className, `${prefixCls}-group-wrapper`, {\n            [`${prefixCls}-group-wrapper-sm`]: size === 'small',\n            [`${prefixCls}-group-wrapper-lg`]: size === 'large',\n        });\n        // Need another wrapper for changing display:table to display:inline-block\n        // and put style prop in wrapper\n        return (<span className={mergedGroupClassName} style={style}>\n        <span className={mergedWrapperClassName}>\n          {addonBeforeNode}\n          {React.cloneElement(children, { style: null })}\n          {addonAfterNode}\n        </span>\n      </span>);\n    }\n    renderLabeledIcon(prefixCls, children) {\n        const { props } = this;\n        const suffix = this.renderSuffix(prefixCls);\n        if (!hasPrefixSuffix(props)) {\n            return children;\n        }\n        const prefix = props.prefix ? (<span className={`${prefixCls}-prefix`}>{props.prefix}</span>) : null;\n        const affixWrapperCls = classNames(props.className, `${prefixCls}-affix-wrapper`, {\n            [`${prefixCls}-affix-wrapper-sm`]: props.size === 'small',\n            [`${prefixCls}-affix-wrapper-lg`]: props.size === 'large',\n            [`${prefixCls}-affix-wrapper-with-clear-btn`]: props.suffix && props.allowClear && this.state.value,\n        });\n        return (<span className={affixWrapperCls} style={props.style}>\n        {prefix}\n        {React.cloneElement(children, {\n            style: null,\n            className: this.getInputClassName(prefixCls),\n        })}\n        {suffix}\n      </span>);\n    }\n    renderInput(prefixCls) {\n        const { className, addonBefore, addonAfter } = this.props;\n        const { value } = this.state;\n        // Fix https://fb.me/react-unknown-prop\n        const otherProps = omit(this.props, [\n            'prefixCls',\n            'onPressEnter',\n            'addonBefore',\n            'addonAfter',\n            'prefix',\n            'suffix',\n            'allowClear',\n            // Input elements must be either controlled or uncontrolled,\n            // specify either the value prop, or the defaultValue prop, but not both.\n            'defaultValue',\n            'size',\n        ]);\n        return this.renderLabeledIcon(prefixCls, <input {...otherProps} value={fixControlledValue(value)} onChange={this.handleChange} className={classNames(this.getInputClassName(prefixCls), {\n            [className]: className && !addonBefore && !addonAfter,\n        })} onKeyDown={this.handleKeyDown} ref={this.saveInput}/>);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderComponent}</ConfigConsumer>;\n    }\n}\nInput.defaultProps = {\n    type: 'text',\n};\nInput.propTypes = {\n    type: PropTypes.string,\n    id: PropTypes.string,\n    size: PropTypes.oneOf(InputSizes),\n    maxLength: PropTypes.number,\n    disabled: PropTypes.bool,\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    className: PropTypes.string,\n    addonBefore: PropTypes.node,\n    addonAfter: PropTypes.node,\n    prefixCls: PropTypes.string,\n    onPressEnter: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    prefix: PropTypes.node,\n    suffix: PropTypes.node,\n    allowClear: PropTypes.bool,\n};\npolyfill(Input);\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}