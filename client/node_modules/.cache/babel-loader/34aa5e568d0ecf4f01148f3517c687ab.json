{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nexport function flatArray() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';\n  var result = [];\n\n  var loop = function loop(array) {\n    array.forEach(function (item) {\n      if (item[childrenName]) {\n        var newItem = _extends({}, item);\n\n        delete newItem[childrenName];\n        result.push(newItem);\n\n        if (item[childrenName].length > 0) {\n          loop(item[childrenName]);\n        }\n      } else {\n        result.push(item);\n      }\n    });\n  };\n\n  loop(data);\n  return result;\n}\nexport function treeMap(tree, mapper) {\n  var childrenName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  return tree.map(function (node, index) {\n    var extra = {};\n\n    if (node[childrenName]) {\n      extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\n    }\n\n    return _extends(_extends({}, mapper(node, index)), extra);\n  });\n}\nexport function flatFilter(tree, callback) {\n  return tree.reduce(function (acc, node) {\n    if (callback(node)) {\n      acc.push(node);\n    }\n\n    if (node.children) {\n      var children = flatFilter(node.children, callback);\n      acc.push.apply(acc, _toConsumableArray(children));\n    }\n\n    return acc;\n  }, []);\n}\nexport function normalizeColumns(elements) {\n  var columns = [];\n  React.Children.forEach(elements, function (element) {\n    if (!React.isValidElement(element)) {\n      return;\n    }\n\n    var column = _extends({}, element.props);\n\n    if (element.key) {\n      column.key = element.key;\n    }\n\n    if (element.type && element.type.__ANT_TABLE_COLUMN_GROUP) {\n      column.children = normalizeColumns(column.children);\n    }\n\n    columns.push(column);\n  });\n  return columns;\n}\nexport function generateValueMaps(items) {\n  var maps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (items || []).forEach(function (_ref) {\n    var value = _ref.value,\n        children = _ref.children;\n    maps[value.toString()] = value;\n    generateValueMaps(children, maps);\n  });\n  return maps;\n}","map":{"version":3,"mappings":"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","names":["React","flatArray","data","childrenName","result","loop","array","forEach","item","newItem","_extends","push","length","treeMap","tree","mapper","map","node","index","extra","flatFilter","callback","reduce","acc","children","_toConsumableArray","normalizeColumns","elements","columns","Children","isValidElement","element","column","props","key","type","__ANT_TABLE_COLUMN_GROUP","generateValueMaps","items","maps","value","toString"],"sources":["C:\\Users\\scs\\OneDrive\\Desktop\\react-youtube-clone-master\\client\\node_modules\\antd\\es\\table\\table\\util.jsx"],"sourcesContent":["import * as React from 'react';\nexport function flatArray(data = [], childrenName = 'children') {\n    const result = [];\n    const loop = (array) => {\n        array.forEach(item => {\n            if (item[childrenName]) {\n                const newItem = Object.assign({}, item);\n                delete newItem[childrenName];\n                result.push(newItem);\n                if (item[childrenName].length > 0) {\n                    loop(item[childrenName]);\n                }\n            }\n            else {\n                result.push(item);\n            }\n        });\n    };\n    loop(data);\n    return result;\n}\nexport function treeMap(tree, mapper, childrenName = 'children') {\n    return tree.map((node, index) => {\n        const extra = {};\n        if (node[childrenName]) {\n            extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\n        }\n        return Object.assign(Object.assign({}, mapper(node, index)), extra);\n    });\n}\nexport function flatFilter(tree, callback) {\n    return tree.reduce((acc, node) => {\n        if (callback(node)) {\n            acc.push(node);\n        }\n        if (node.children) {\n            const children = flatFilter(node.children, callback);\n            acc.push(...children);\n        }\n        return acc;\n    }, []);\n}\nexport function normalizeColumns(elements) {\n    const columns = [];\n    React.Children.forEach(elements, element => {\n        if (!React.isValidElement(element)) {\n            return;\n        }\n        const column = Object.assign({}, element.props);\n        if (element.key) {\n            column.key = element.key;\n        }\n        if (element.type && element.type.__ANT_TABLE_COLUMN_GROUP) {\n            column.children = normalizeColumns(column.children);\n        }\n        columns.push(column);\n    });\n    return columns;\n}\nexport function generateValueMaps(items, maps = {}) {\n    (items || []).forEach(({ value, children }) => {\n        maps[value.toString()] = value;\n        generateValueMaps(children, maps);\n    });\n    return maps;\n}\n"]},"metadata":{},"sourceType":"module"}