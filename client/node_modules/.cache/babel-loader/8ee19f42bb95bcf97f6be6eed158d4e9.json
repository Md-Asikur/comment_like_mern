{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // matchMedia polyfill for\n// https://github.com/WickyNilliams/enquire.js/issues/82\n\n\nvar enquire; // TODO: Will be removed in antd 4.0 because we will no longer support ie9\n\nif (typeof window !== 'undefined') {\n  var matchMediaPolyfill = function matchMediaPolyfill(mediaQuery) {\n    return {\n      media: mediaQuery,\n      matches: false,\n      addListener: function addListener() {},\n      removeListener: function removeListener() {}\n    };\n  }; // ref: https://github.com/ant-design/ant-design/issues/18774\n\n\n  if (!window.matchMedia) window.matchMedia = matchMediaPolyfill; // eslint-disable-next-line global-require\n\n  enquire = require('enquire.js');\n}\n\nexport var responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport var responsiveMap = {\n  xs: '(max-width: 575px)',\n  sm: '(min-width: 576px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 992px)',\n  xl: '(min-width: 1200px)',\n  xxl: '(min-width: 1600px)'\n};\nvar subscribers = [];\nvar subUid = -1;\nvar screens = {};\nvar responsiveObserve = {\n  dispatch: function dispatch(pointMap) {\n    screens = pointMap;\n\n    if (subscribers.length < 1) {\n      return false;\n    }\n\n    subscribers.forEach(function (item) {\n      item.func(screens);\n    });\n    return true;\n  },\n  subscribe: function subscribe(func) {\n    if (subscribers.length === 0) {\n      this.register();\n    }\n\n    var token = (++subUid).toString();\n    subscribers.push({\n      token: token,\n      func: func\n    });\n    func(screens);\n    return token;\n  },\n  unsubscribe: function unsubscribe(token) {\n    subscribers = subscribers.filter(function (item) {\n      return item.token !== token;\n    });\n\n    if (subscribers.length === 0) {\n      this.unregister();\n    }\n  },\n  unregister: function unregister() {\n    Object.keys(responsiveMap).map(function (screen) {\n      return enquire.unregister(responsiveMap[screen]);\n    });\n  },\n  register: function register() {\n    var _this = this;\n\n    Object.keys(responsiveMap).map(function (screen) {\n      return enquire.register(responsiveMap[screen], {\n        match: function match() {\n          var pointMap = _extends(_extends({}, screens), _defineProperty({}, screen, true));\n\n          _this.dispatch(pointMap);\n        },\n        unmatch: function unmatch() {\n          var pointMap = _extends(_extends({}, screens), _defineProperty({}, screen, false));\n\n          _this.dispatch(pointMap);\n        },\n        // Keep a empty destory to avoid triggering unmatch when unregister\n        destroy: function destroy() {}\n      });\n    });\n  }\n};\nexport default responsiveObserve;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;AACA;;;AACA,IAAIA,OAAJ,C,CACA;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;EAC/B,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,UAAD,EAAgB;IACvC,OAAO;MACHC,KAAK,EAAED,UADJ;MAEHE,OAAO,EAAE,KAFN;MAGHC,WAHG,yBAGW,CAHX;MAIHC,cAJG,4BAIc,CAAG;IAJjB,CAAP;EADJ,EAD+B,CAS/B;;;EACA,IAAI,CAACN,MAAM,CAACO,UAAZ,EACIP,MAAM,CAACO,UAAPP,GAAoBC,kBAApBD,CAX2B,CAY/B;;EACAD,OAAO,GAAGS,OAAO,CAAC,YAAD,CAAjBT;AACH;;AACD,OAAO,IAAMU,eAAe,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CAAxB;AACP,OAAO,IAAMC,aAAa,GAAG;EACzBC,EAAE,EAAE,oBADqB;EAEzBC,EAAE,EAAE,oBAFqB;EAGzBC,EAAE,EAAE,oBAHqB;EAIzBC,EAAE,EAAE,oBAJqB;EAKzBC,EAAE,EAAE,qBALqB;EAMzBC,GAAG,EAAE;AANoB,CAAtB;AAQP,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,MAAM,GAAG,CAAC,CAAd;AACA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAMC,iBAAiB,GAAG;EACtBC,QADsB,oBACbC,QADa,EACH;IACfH,OAAO,GAAGG,QAAVH;;IACA,IAAIF,WAAW,CAACM,MAAZN,GAAqB,CAAzB,EAA4B;MACxB,OAAO,KAAP;IACH;;IACDA,WAAW,CAACO,OAAZP,CAAoB,gBAAQ;MACxBQ,IAAI,CAACC,IAALD,CAAUN,OAAVM;IADJ;IAGA,OAAO,IAAP;EATkB;EAWtBE,SAXsB,qBAWZD,IAXY,EAWN;IACZ,IAAIT,WAAW,CAACM,MAAZN,KAAuB,CAA3B,EAA8B;MAC1B,KAAKW,QAAL;IACH;;IACD,IAAMC,KAAK,GAAG,CAAC,EAAEX,MAAH,EAAWY,QAAX,EAAd;IACAb,WAAW,CAACc,IAAZd,CAAiB;MACbY,KAAK,EAALA,KADa;MAEbH,IAAI,EAAJA;IAFa,CAAjBT;IAIAS,IAAI,CAACP,OAAD,CAAJO;IACA,OAAOG,KAAP;EArBkB;EAuBtBG,WAvBsB,uBAuBVH,KAvBU,EAuBH;IACfZ,WAAW,GAAGA,WAAW,CAACgB,MAAZhB,CAAmB,gBAAI;MAAA,OAAIQ,IAAI,CAACI,KAALJ,KAAeI,KAAnB;IAAvB,EAAdZ;;IACA,IAAIA,WAAW,CAACM,MAAZN,KAAuB,CAA3B,EAA8B;MAC1B,KAAKiB,UAAL;IACH;EA3BiB;EA6BtBA,UA7BsB,wBA6BT;IACTC,MAAM,CAACC,IAAPD,CAAYzB,aAAZyB,EAA2BE,GAA3BF,CAA+B,UAACG,MAAD;MAAA,OAAYvC,OAAO,CAACmC,UAARnC,CAAmBW,aAAa,CAAC4B,MAAD,CAAhCvC,CAAZ;IAA/B;EA9BkB;EAgCtB6B,QAhCsB,sBAgCX;IAAA;;IACPO,MAAM,CAACC,IAAPD,CAAYzB,aAAZyB,EAA2BE,GAA3BF,CAA+B,UAACG,MAAD;MAAA,OAAYvC,OAAO,CAAC6B,QAAR7B,CAAiBW,aAAa,CAAC4B,MAAD,CAA9BvC,EAAwC;QAC/EwC,KAAK,EAAE,iBAAM;UACT,IAAMjB,QAAQ,GAAGkB,SAAcA,SAAc,EAAd,EAAkBrB,OAAlB,CAAd,sBAA6CmB,MAA7C,EAAsD,IAAtD,EAAjB;;UACAG,KAAI,CAACpB,QAAL,CAAcC,QAAd;QAH2E;QAK/EoB,OAAO,EAAE,mBAAM;UACX,IAAMpB,QAAQ,GAAGkB,SAAcA,SAAc,EAAd,EAAkBrB,OAAlB,CAAd,sBAA6CmB,MAA7C,EAAsD,KAAtD,EAAjB;;UACAG,KAAI,CAACpB,QAAL,CAAcC,QAAd;QAP2E;QAS/E;QACAqB,OAV+E,qBAUrE,CAAG;MAVkE,CAAxC5C,CAAZ;IAA/B;EAYH;AA7CqB,CAA1B;AA+CA,eAAeqB,iBAAf","names":["enquire","window","matchMediaPolyfill","mediaQuery","media","matches","addListener","removeListener","matchMedia","require","responsiveArray","responsiveMap","xs","sm","md","lg","xl","xxl","subscribers","subUid","screens","responsiveObserve","dispatch","pointMap","length","forEach","item","func","subscribe","register","token","toString","push","unsubscribe","filter","unregister","Object","keys","map","screen","match","_extends","_this","unmatch","destroy"],"sources":["C:\\Users\\scs\\OneDrive\\Desktop\\Youtube Deploy\\client\\node_modules\\antd\\es\\_util\\_util\\responsiveObserve.js"],"sourcesContent":["// matchMedia polyfill for\n// https://github.com/WickyNilliams/enquire.js/issues/82\nlet enquire;\n// TODO: Will be removed in antd 4.0 because we will no longer support ie9\nif (typeof window !== 'undefined') {\n    const matchMediaPolyfill = (mediaQuery) => {\n        return {\n            media: mediaQuery,\n            matches: false,\n            addListener() { },\n            removeListener() { },\n        };\n    };\n    // ref: https://github.com/ant-design/ant-design/issues/18774\n    if (!window.matchMedia)\n        window.matchMedia = matchMediaPolyfill;\n    // eslint-disable-next-line global-require\n    enquire = require('enquire.js');\n}\nexport const responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport const responsiveMap = {\n    xs: '(max-width: 575px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n    xxl: '(min-width: 1600px)',\n};\nlet subscribers = [];\nlet subUid = -1;\nlet screens = {};\nconst responsiveObserve = {\n    dispatch(pointMap) {\n        screens = pointMap;\n        if (subscribers.length < 1) {\n            return false;\n        }\n        subscribers.forEach(item => {\n            item.func(screens);\n        });\n        return true;\n    },\n    subscribe(func) {\n        if (subscribers.length === 0) {\n            this.register();\n        }\n        const token = (++subUid).toString();\n        subscribers.push({\n            token,\n            func,\n        });\n        func(screens);\n        return token;\n    },\n    unsubscribe(token) {\n        subscribers = subscribers.filter(item => item.token !== token);\n        if (subscribers.length === 0) {\n            this.unregister();\n        }\n    },\n    unregister() {\n        Object.keys(responsiveMap).map((screen) => enquire.unregister(responsiveMap[screen]));\n    },\n    register() {\n        Object.keys(responsiveMap).map((screen) => enquire.register(responsiveMap[screen], {\n            match: () => {\n                const pointMap = Object.assign(Object.assign({}, screens), { [screen]: true });\n                this.dispatch(pointMap);\n            },\n            unmatch: () => {\n                const pointMap = Object.assign(Object.assign({}, screens), { [screen]: false });\n                this.dispatch(pointMap);\n            },\n            // Keep a empty destory to avoid triggering unmatch when unregister\n            destroy() { },\n        }));\n    },\n};\nexport default responsiveObserve;\n"]},"metadata":{},"sourceType":"module"}